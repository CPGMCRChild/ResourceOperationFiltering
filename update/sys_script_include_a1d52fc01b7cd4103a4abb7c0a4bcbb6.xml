<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>sn_cpg_filter.FilterUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>FilterUtils</name>
        <script><![CDATA[var FilterUtils = Class.create();
FilterUtils.prototype = {
    displayName: '',

    initialize: function() {
        this.filterTable = 'sn_cpg_filter_operations';

        this.ldcTypeFilterType = 'datacenter_types';
        this.ldcFilterType = 'logical_datacenters';
        this.ciAttributeFilterType = 'ci_attributes';
        this.scriptFilterType = 'custom_script';

        this.hostedOnRelId = '5f985e0ec0a8010e00a9714f2a172815';
        this.hostedOnRelName = 'Hosted on::Hosts';

        var ldcTable = 'cmdb_ci_logical_datacenter';
        var ldcHierarchy_GTH = new GlideTableHierarchy(ldcTable);
        this.ldcTableList = ldcHierarchy_GTH.getAllExtensions();
    },

    filterResourceOperations: function(rbOperations, ciId, ciTable) {
        if (ciTable == 'sn_cmp_stack') return rbOperations;

        var ci_GR = new GlideRecord(ciTable);
        if (!ci_GR.get(ciId)) return rbOperations;

        var ciLDC_GR = this._getCiLDC_GR(ciId, ciTable);
        var filteredOperations = [];

        for (var i = 0; i < rbOperations.length; i++) {
            if (!this._checkLDCType(ciLDC_GR, ci_GR, rbOperations[i])) continue;
            if (!this._checkLDC(ciLDC_GR, ci_GR, rbOperations[i])) continue;
            if (!this._checkCIAttributes(ci_GR, rbOperations[i])) continue;
            if (!this._checkScript(ciLDC_GR, ci_GR, rbOperations[i])) continue;

            filteredOperations.push(rbOperations[i]);

            if (!gs.nil(this.displayName))
                filteredOperations[i].operationDisplayName = this.displayName + '';

            this.displayName = '';
        }

        return filteredOperations;
    },

    _setDisplayValue: function(opDisplayName) {
        this.displayName = opDisplayName;
    },

    _getCiLDC_GR: function(ciId, ciTable) {
        var ci_GR = new GlideRecord(ciTable);

        ci_GR.get(ciId);

        var ciRel_GR = new GlideRecord('cmdb_rel_ci');
        var relTypeCondition = ciRel_GR.addQuery('type', this.hostedOnRelId);
        relTypeCondition.addOrCondition('type.name', this.hostedOnRelName);
        ciRel_GR.addQuery('child.sys_class_name', this.ldcTableList);
        ciRel_GR.addQuery('parent', ciId);
        ciRel_GR.query();

        if (ciRel_GR.next()) return ciRel_GR.child.getRefRecord();
    },

    _getFilterGR: function(filterType, ciTableName, operationId) {
        var filter_GR = new GlideRecord(this.filterTable);
        filter_GR.addActiveQuery();
        filter_GR.addQuery('filter_type', filterType);
        filter_GR.addQuery('ci_type', ciTableName);
        filter_GR.addQuery('resource_operation.operation', operationId);
        filter_GR.query();

        return filter_GR;

    },

    _checkLDCType: function(ciLDC_GR, ci_GR, rbOperation) {
        var filter_GR = this._getFilterGR(this.ldcTypeFilterType, ci_GR, rbOperation.operationId);
        filterTest: while (filter_GR.next()) {
            this._setDisplayValue(filter_GR.display_name);
            var splitLDCTypes = filter_GR.datacenter_types.getDisplayValue().split(', ');

            for (var i = 0; i < splitLDCTypes.length; i++) {
                if (splitLDCTypes[i] == ciLDC_GR.sys_class_name.getDisplayValue()) continue filterTest;
            }
            return false;
        }
        return true;
    },

    _checkLDC: function(ciLDC_GR, ci_GR, rbOperation) {
        var filter_GR = this._getFilterGR(this.ldcFilterType, ci_GR, rbOperation.operationId);

        filterTest: while (filter_GR.next()) {
            this._setDisplayValue(filter_GR.display_name);
            var splitLDCs = filter_GR.logical_datacenters.toString().split(',');

            for (var i = 0; i < splitLDCs.length; i++) {
                if (splitLDCs[i] == ciLDC_GR.sys_id) continue filterTest;
            }
            return false;
        }
        return true;
    },

    _checkCIAttributes: function(ci_GR, rbOperation) {
        var filter_GR = this._getFilterGR(this.ciAttributeFilterType, ci_GR, rbOperation.operationId);

        filterTest: while (filter_GR.next()) {
            this._setDisplayValue(filter_GR.display_name);
            if (GlideFilter.checkRecord(ci_GR, filter_GR.ci_filter)) continue filterTest;
            return false;
        }
        return true;
    },

    _checkScript: function(ciLDC_GR, ci_GR, rbOperation) {
        var filter_GR = this._getFilterGR(this.scriptFilterType, ci_GR, rbOperation.operationId);

        filterTest: while (filter_GR.next()) {
            this._setDisplayValue(filter_GR.display_name);
            var scriptVars = {};
            scriptVars.ciId = ci_GR.sys_id;
            scriptVars.ciTable = ci_GR.sys_class_name;
            scriptVars.ldcId = ciLDC_GR.sys_id;
            scriptVars.rbOperationName = rbOperation.operationName;
            scriptVars.rbOperationId = rbOperation.operationId;

            var evaluator = new GlideScopedEvaluator();
            if (evaluator.evaluateScript(filter_GR, 'filter_script', scriptVars)) continue filterTest;
            return false;
        }
        return true;
    },



    getDatacenterTables : function() {

        var logicalSysId = '';
        var logicalGr = new GlideRecord('sys_db_object');
        logicalGr.addQuery('name', 'cmdb_ci_logical_datacenter');
        logicalGr.query();
        if (logicalGr.next())
            logicalSysId = logicalGr.getUniqueValue();

        var selectedSysIds = [];
        var gr = new GlideRecord("sys_db_object");
        gr.addQuery('super_class', logicalSysId);
        gr.query();
        while (gr.next()) {
            selectedSysIds.push(gr.getUniqueValue());
		}
		
		var refQual = "sys_idIN" + selectedSysIds.join(',');
		return refQual;
    },

    type: 'FilterUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-11 06:41:23</sys_created_on>
        <sys_id>a1d52fc01b7cd4103a4abb7c0a4bcbb6</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>FilterUtils</sys_name>
        <sys_package display_value="CPG Resource Operations Filter" source="sn_cpg_filter">0f7fa6a25b330010720b1ec76981c7de</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CPG Resource Operations Filter">0f7fa6a25b330010720b1ec76981c7de</sys_scope>
        <sys_update_name>sys_script_include_a1d52fc01b7cd4103a4abb7c0a4bcbb6</sys_update_name>
        <sys_updated_by>ayush.rawat@snc</sys_updated_by>
        <sys_updated_on>2020-06-24 02:35:17</sys_updated_on>
    </sys_script_include>
</record_update>
